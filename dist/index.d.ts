// Generated by dts-bundle-generator v9.5.1

import { CategoryConfigPartyPrivacy, IDBUser } from '@fnlb-project/shared/types';
import { Model, Schema } from 'mongoose';

export declare class DatabaseClient {
	connect(dbURI: string): Promise<void>;
}
declare const BotModel: import("mongoose").Model<{
	owner: import("mongoose").Types.ObjectId;
	type: number;
	nickname: string;
	email: string;
	parent?: import("mongoose").Types.ObjectId | null | undefined;
	deviceAuth?: {
		accountId: string;
		deviceId: string;
		secret: string;
	} | null | undefined;
}, {}, {}, {}, import("mongoose").Document<unknown, {}, {
	owner: import("mongoose").Types.ObjectId;
	type: number;
	nickname: string;
	email: string;
	parent?: import("mongoose").Types.ObjectId | null | undefined;
	deviceAuth?: {
		accountId: string;
		deviceId: string;
		secret: string;
	} | null | undefined;
}> & {
	owner: import("mongoose").Types.ObjectId;
	type: number;
	nickname: string;
	email: string;
	parent?: import("mongoose").Types.ObjectId | null | undefined;
	deviceAuth?: {
		accountId: string;
		deviceId: string;
		secret: string;
	} | null | undefined;
} & {
	_id: import("mongoose").Types.ObjectId;
}, Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
	owner: import("mongoose").Types.ObjectId;
	type: number;
	nickname: string;
	email: string;
	parent?: import("mongoose").Types.ObjectId | null | undefined;
	deviceAuth?: {
		accountId: string;
		deviceId: string;
		secret: string;
	} | null | undefined;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
	owner: import("mongoose").Types.ObjectId;
	type: number;
	nickname: string;
	email: string;
	parent?: import("mongoose").Types.ObjectId | null | undefined;
	deviceAuth?: {
		accountId: string;
		deviceId: string;
		secret: string;
	} | null | undefined;
}>> & import("mongoose").FlatRecord<{
	owner: import("mongoose").Types.ObjectId;
	type: number;
	nickname: string;
	email: string;
	parent?: import("mongoose").Types.ObjectId | null | undefined;
	deviceAuth?: {
		accountId: string;
		deviceId: string;
		secret: string;
	} | null | undefined;
}> & {
	_id: import("mongoose").Types.ObjectId;
}>>;
declare const CategoryModel: import("mongoose").Model<{
	owner: import("mongoose").Types.ObjectId;
	name: string;
	config?: {
		replyLangs: string[];
		searchLangs: string[];
		platform: string[];
		prefixes: string[];
		extraOwners: string[];
		admins: string[];
		whitelistUsers: string[];
		blacklistUsers: string[];
		excludedAutoAddFriends: string[];
		otherBots: string[];
		statusText: string[];
		statusInterval: number[];
		level: number[];
		bpLevel: number[];
		disableMatchmakingChecks: boolean[];
		disableJoinMessages: boolean[];
		usernameTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		messageContentTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		cosmeticTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		addFriendTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		memberJoinTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		changeCosmeticTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		onlyOwnerCommands: string[];
		onlyAdminCommands: string[];
		onlyWhitelistUsersCommands: string[];
		onlyFriendsCommands: string[];
		onlyPartyMembersCommands: string[];
		onlyWhisperCommands: string[];
		startOutfit: string[];
		startOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBackpack: string[];
		startBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startPickaxe: string[];
		startPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBanner: string[];
		joinOutfit: string[];
		joinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinBackpack: string[];
		joinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinPickaxe: string[];
		joinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinEmote: string[];
		joinEmoji: string[];
		joinBanner: string[];
		memberJoinOutfit: string[];
		memberJoinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinBackpack: string[];
		memberJoinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinPickaxe: string[];
		memberJoinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinEmote: string[];
		memberJoinEmoji: string[];
		memberJoinBanner: string[];
		privacy?: string | CategoryConfigPartyPrivacy | null | undefined;
		inviteTimeout?: number | null | undefined;
		maxBotsPerLobby?: number | null | undefined;
		maxBotsPerLobbyWithOwner?: number | null | undefined;
		maxBotsPerLobbyWithAdmin?: number | null | undefined;
		maxBotsPerLobbyWithWhitelistUser?: number | null | undefined;
		allowMatchmaking?: boolean | null | undefined;
		acceptFriendRequests?: boolean | null | undefined;
		sendFriendRequestOnJoinParty?: boolean | null | undefined;
		sendFriendRequestOnMemberJoinParty?: boolean | null | undefined;
		runCommandsWithoutPrefix?: boolean | null | undefined;
		setCosmeticsWithoutCommands?: boolean | null | undefined;
	} | null | undefined;
}, {}, {}, {}, import("mongoose").Document<unknown, {}, {
	owner: import("mongoose").Types.ObjectId;
	name: string;
	config?: {
		replyLangs: string[];
		searchLangs: string[];
		platform: string[];
		prefixes: string[];
		extraOwners: string[];
		admins: string[];
		whitelistUsers: string[];
		blacklistUsers: string[];
		excludedAutoAddFriends: string[];
		otherBots: string[];
		statusText: string[];
		statusInterval: number[];
		level: number[];
		bpLevel: number[];
		disableMatchmakingChecks: boolean[];
		disableJoinMessages: boolean[];
		usernameTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		messageContentTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		cosmeticTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		addFriendTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		memberJoinTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		changeCosmeticTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		onlyOwnerCommands: string[];
		onlyAdminCommands: string[];
		onlyWhitelistUsersCommands: string[];
		onlyFriendsCommands: string[];
		onlyPartyMembersCommands: string[];
		onlyWhisperCommands: string[];
		startOutfit: string[];
		startOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBackpack: string[];
		startBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startPickaxe: string[];
		startPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBanner: string[];
		joinOutfit: string[];
		joinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinBackpack: string[];
		joinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinPickaxe: string[];
		joinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinEmote: string[];
		joinEmoji: string[];
		joinBanner: string[];
		memberJoinOutfit: string[];
		memberJoinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinBackpack: string[];
		memberJoinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinPickaxe: string[];
		memberJoinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinEmote: string[];
		memberJoinEmoji: string[];
		memberJoinBanner: string[];
		privacy?: string | CategoryConfigPartyPrivacy | null | undefined;
		inviteTimeout?: number | null | undefined;
		maxBotsPerLobby?: number | null | undefined;
		maxBotsPerLobbyWithOwner?: number | null | undefined;
		maxBotsPerLobbyWithAdmin?: number | null | undefined;
		maxBotsPerLobbyWithWhitelistUser?: number | null | undefined;
		allowMatchmaking?: boolean | null | undefined;
		acceptFriendRequests?: boolean | null | undefined;
		sendFriendRequestOnJoinParty?: boolean | null | undefined;
		sendFriendRequestOnMemberJoinParty?: boolean | null | undefined;
		runCommandsWithoutPrefix?: boolean | null | undefined;
		setCosmeticsWithoutCommands?: boolean | null | undefined;
	} | null | undefined;
}> & {
	owner: import("mongoose").Types.ObjectId;
	name: string;
	config?: {
		replyLangs: string[];
		searchLangs: string[];
		platform: string[];
		prefixes: string[];
		extraOwners: string[];
		admins: string[];
		whitelistUsers: string[];
		blacklistUsers: string[];
		excludedAutoAddFriends: string[];
		otherBots: string[];
		statusText: string[];
		statusInterval: number[];
		level: number[];
		bpLevel: number[];
		disableMatchmakingChecks: boolean[];
		disableJoinMessages: boolean[];
		usernameTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		messageContentTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		cosmeticTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		addFriendTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		memberJoinTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		changeCosmeticTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		onlyOwnerCommands: string[];
		onlyAdminCommands: string[];
		onlyWhitelistUsersCommands: string[];
		onlyFriendsCommands: string[];
		onlyPartyMembersCommands: string[];
		onlyWhisperCommands: string[];
		startOutfit: string[];
		startOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBackpack: string[];
		startBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startPickaxe: string[];
		startPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBanner: string[];
		joinOutfit: string[];
		joinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinBackpack: string[];
		joinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinPickaxe: string[];
		joinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinEmote: string[];
		joinEmoji: string[];
		joinBanner: string[];
		memberJoinOutfit: string[];
		memberJoinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinBackpack: string[];
		memberJoinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinPickaxe: string[];
		memberJoinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinEmote: string[];
		memberJoinEmoji: string[];
		memberJoinBanner: string[];
		privacy?: string | CategoryConfigPartyPrivacy | null | undefined;
		inviteTimeout?: number | null | undefined;
		maxBotsPerLobby?: number | null | undefined;
		maxBotsPerLobbyWithOwner?: number | null | undefined;
		maxBotsPerLobbyWithAdmin?: number | null | undefined;
		maxBotsPerLobbyWithWhitelistUser?: number | null | undefined;
		allowMatchmaking?: boolean | null | undefined;
		acceptFriendRequests?: boolean | null | undefined;
		sendFriendRequestOnJoinParty?: boolean | null | undefined;
		sendFriendRequestOnMemberJoinParty?: boolean | null | undefined;
		runCommandsWithoutPrefix?: boolean | null | undefined;
		setCosmeticsWithoutCommands?: boolean | null | undefined;
	} | null | undefined;
} & {
	_id: import("mongoose").Types.ObjectId;
}, Schema<any, import("mongoose").Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
	owner: import("mongoose").Types.ObjectId;
	name: string;
	config?: {
		replyLangs: string[];
		searchLangs: string[];
		platform: string[];
		prefixes: string[];
		extraOwners: string[];
		admins: string[];
		whitelistUsers: string[];
		blacklistUsers: string[];
		excludedAutoAddFriends: string[];
		otherBots: string[];
		statusText: string[];
		statusInterval: number[];
		level: number[];
		bpLevel: number[];
		disableMatchmakingChecks: boolean[];
		disableJoinMessages: boolean[];
		usernameTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		messageContentTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		cosmeticTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		addFriendTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		memberJoinTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		changeCosmeticTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		onlyOwnerCommands: string[];
		onlyAdminCommands: string[];
		onlyWhitelistUsersCommands: string[];
		onlyFriendsCommands: string[];
		onlyPartyMembersCommands: string[];
		onlyWhisperCommands: string[];
		startOutfit: string[];
		startOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBackpack: string[];
		startBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startPickaxe: string[];
		startPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBanner: string[];
		joinOutfit: string[];
		joinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinBackpack: string[];
		joinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinPickaxe: string[];
		joinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinEmote: string[];
		joinEmoji: string[];
		joinBanner: string[];
		memberJoinOutfit: string[];
		memberJoinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinBackpack: string[];
		memberJoinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinPickaxe: string[];
		memberJoinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinEmote: string[];
		memberJoinEmoji: string[];
		memberJoinBanner: string[];
		privacy?: string | CategoryConfigPartyPrivacy | null | undefined;
		inviteTimeout?: number | null | undefined;
		maxBotsPerLobby?: number | null | undefined;
		maxBotsPerLobbyWithOwner?: number | null | undefined;
		maxBotsPerLobbyWithAdmin?: number | null | undefined;
		maxBotsPerLobbyWithWhitelistUser?: number | null | undefined;
		allowMatchmaking?: boolean | null | undefined;
		acceptFriendRequests?: boolean | null | undefined;
		sendFriendRequestOnJoinParty?: boolean | null | undefined;
		sendFriendRequestOnMemberJoinParty?: boolean | null | undefined;
		runCommandsWithoutPrefix?: boolean | null | undefined;
		setCosmeticsWithoutCommands?: boolean | null | undefined;
	} | null | undefined;
}, import("mongoose").Document<unknown, {}, import("mongoose").FlatRecord<{
	owner: import("mongoose").Types.ObjectId;
	name: string;
	config?: {
		replyLangs: string[];
		searchLangs: string[];
		platform: string[];
		prefixes: string[];
		extraOwners: string[];
		admins: string[];
		whitelistUsers: string[];
		blacklistUsers: string[];
		excludedAutoAddFriends: string[];
		otherBots: string[];
		statusText: string[];
		statusInterval: number[];
		level: number[];
		bpLevel: number[];
		disableMatchmakingChecks: boolean[];
		disableJoinMessages: boolean[];
		usernameTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		messageContentTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		cosmeticTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		addFriendTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		memberJoinTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		changeCosmeticTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		onlyOwnerCommands: string[];
		onlyAdminCommands: string[];
		onlyWhitelistUsersCommands: string[];
		onlyFriendsCommands: string[];
		onlyPartyMembersCommands: string[];
		onlyWhisperCommands: string[];
		startOutfit: string[];
		startOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBackpack: string[];
		startBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startPickaxe: string[];
		startPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBanner: string[];
		joinOutfit: string[];
		joinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinBackpack: string[];
		joinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinPickaxe: string[];
		joinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinEmote: string[];
		joinEmoji: string[];
		joinBanner: string[];
		memberJoinOutfit: string[];
		memberJoinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinBackpack: string[];
		memberJoinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinPickaxe: string[];
		memberJoinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinEmote: string[];
		memberJoinEmoji: string[];
		memberJoinBanner: string[];
		privacy?: string | CategoryConfigPartyPrivacy | null | undefined;
		inviteTimeout?: number | null | undefined;
		maxBotsPerLobby?: number | null | undefined;
		maxBotsPerLobbyWithOwner?: number | null | undefined;
		maxBotsPerLobbyWithAdmin?: number | null | undefined;
		maxBotsPerLobbyWithWhitelistUser?: number | null | undefined;
		allowMatchmaking?: boolean | null | undefined;
		acceptFriendRequests?: boolean | null | undefined;
		sendFriendRequestOnJoinParty?: boolean | null | undefined;
		sendFriendRequestOnMemberJoinParty?: boolean | null | undefined;
		runCommandsWithoutPrefix?: boolean | null | undefined;
		setCosmeticsWithoutCommands?: boolean | null | undefined;
	} | null | undefined;
}>> & import("mongoose").FlatRecord<{
	owner: import("mongoose").Types.ObjectId;
	name: string;
	config?: {
		replyLangs: string[];
		searchLangs: string[];
		platform: string[];
		prefixes: string[];
		extraOwners: string[];
		admins: string[];
		whitelistUsers: string[];
		blacklistUsers: string[];
		excludedAutoAddFriends: string[];
		otherBots: string[];
		statusText: string[];
		statusInterval: number[];
		level: number[];
		bpLevel: number[];
		disableMatchmakingChecks: boolean[];
		disableJoinMessages: boolean[];
		usernameTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		messageContentTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		cosmeticTriggers: import("mongoose").Types.DocumentArray<{
			triggers: string[];
			detectionMethods: number[];
			actions: number[];
			messages: string[];
		}>;
		addFriendTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		memberJoinTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		changeCosmeticTrigger: import("mongoose").Types.DocumentArray<{
			actions: number[];
			messages: string[];
		}>;
		onlyOwnerCommands: string[];
		onlyAdminCommands: string[];
		onlyWhitelistUsersCommands: string[];
		onlyFriendsCommands: string[];
		onlyPartyMembersCommands: string[];
		onlyWhisperCommands: string[];
		startOutfit: string[];
		startOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBackpack: string[];
		startBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startPickaxe: string[];
		startPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		startBanner: string[];
		joinOutfit: string[];
		joinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinBackpack: string[];
		joinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinPickaxe: string[];
		joinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		joinEmote: string[];
		joinEmoji: string[];
		joinBanner: string[];
		memberJoinOutfit: string[];
		memberJoinOutfitVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinBackpack: string[];
		memberJoinBackpackVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinPickaxe: string[];
		memberJoinPickaxeVariants: import("mongoose").Types.DocumentArray<{
			1: unknown;
			0: number[];
		}>;
		memberJoinEmote: string[];
		memberJoinEmoji: string[];
		memberJoinBanner: string[];
		privacy?: string | CategoryConfigPartyPrivacy | null | undefined;
		inviteTimeout?: number | null | undefined;
		maxBotsPerLobby?: number | null | undefined;
		maxBotsPerLobbyWithOwner?: number | null | undefined;
		maxBotsPerLobbyWithAdmin?: number | null | undefined;
		maxBotsPerLobbyWithWhitelistUser?: number | null | undefined;
		allowMatchmaking?: boolean | null | undefined;
		acceptFriendRequests?: boolean | null | undefined;
		sendFriendRequestOnJoinParty?: boolean | null | undefined;
		sendFriendRequestOnMemberJoinParty?: boolean | null | undefined;
		runCommandsWithoutPrefix?: boolean | null | undefined;
		setCosmeticsWithoutCommands?: boolean | null | undefined;
	} | null | undefined;
}> & {
	_id: import("mongoose").Types.ObjectId;
}>>;
export interface IUserMethods {
	comparePassword(password: string): boolean;
}
export type UserModel = Model<IDBUser, {}, IUserMethods>;
declare const UserModel$1: UserModel;

export {
	BotModel as botModel,
	CategoryModel as categoryModel,
	UserModel$1 as userModel,
};

export {};
